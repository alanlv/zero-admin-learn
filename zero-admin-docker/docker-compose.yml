version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  MysqlData:
    driver: local
  RedisData:
    driver: local

# 服务容器配置
services:
  sys.rpc:
    build:
      context: ./sys.rpc
    environment:
      - TZ=${TZ}
    privileged: true

    ports:
      - "8080:8080"
      - "8180:8180"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always

  ums.rpc:
    build:
      context: ./ums.rpc
    environment:
      - TZ=${TZ}
    privileged: true

    ports:
      - "8081:8081"
      - "8181:8181"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always

  pms.rpc:
    build:
      context: ./pms.rpc
    environment:
      - TZ=${TZ}
    privileged: true

    ports:
      - "8082:8082"
      - "8182:8182"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always

  oms.rpc:
    build:
      context: ./oms.rpc
    environment:
      - TZ=${TZ}
    privileged: true

    ports:
      - "8083:8083"
      - "8183:8183"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always

  sms.rpc:
    build:
      context: ./sms.rpc
    environment:
      - TZ=${TZ}
    privileged: true

    ports:
      - "8084:8084"
      - "8184:8184"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always

  admin.api:
    build:
      context: ./admin.api
    environment:
      - TZ=${TZ}
    privileged: true

    ports:
      - "8888:8888"
      - "8188:8188"
    stdin_open: true
    tty: true
    networks:
      - backend
    restart: always

  etcd:
    # 自定义容器名称
    build:
      context: ./etcd # 指定构建使用的 Dockerfile 文件
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:
      # 设置端口映射
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always

  mysql:
    build:
      context: ./mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME} # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - MysqlData:/var/lib/mysql #use volume mysql_data for sql data
    ports:
      - "${MYSQL_PORT}:3306" # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis:
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - RedisData:/data # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379" # 设置容器6379端口映射指定宿主机端口
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--requirepass",
        "123456"
      ]
    networks:
      - backend
    restart: always

  mysql-manage:
    build:
      context: ./mysql-manage
    environment:
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME} # 设置连接的 Mysql 服务用户名称
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD} # 设置连接的 Mysql 服务用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD} # 设置连接的 Mysql 服务 root 用户密码
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST} # 设置连接的 Mysql 服务 host，可以是 Mysql 服务容器的名称，也可以是 Mysql 服务容器的 ip 地址
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT} # 设置连接的 Mysql 服务端口号
    ports:
      - "${MYSQL_MANAGE_PORT}:80" # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:
      # 依赖容器
      - mysql # 在 Mysql 服务容器启动后启动
    networks:
      - backend
    restart: always

  redis-manage:
    build:
      context: ./redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME} # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD} # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST} # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT} # 设置连接的 Redis 服务端口号
    ports:
      - "${REDIS_MANAGE_PORT}:80" # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:
      # 依赖容器
      - redis # 在 Redis 服务容器启动后启动
    networks:
      - backend
    restart: always

  etcd-manage:
    build:
      context: ./etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080" # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:
      # 依赖容器
      - etcd # 在 etcd 服务容器启动后启动
    networks:
      - backend
    restart: always

  prometheus:
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090" # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000" # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686" # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
